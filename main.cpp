#include <iostream>
#include "Dense/Dense.hpp"
#include "Activations/ReLU.hpp"
#include "Activations/Sigmoid.hpp"
#include "Conv/Conv1Dlayer.hpp"

#include "NeuralNetwork.hpp"
#include <chrono>

int main() {
    NeuralNetwork<
        Conv1D<float, 10, 3, 4, ReLU<float>>,    
        Dense<float, 40, 8, ReLU<float>>,        
        Dense<float, 8, 1, Sigmoid<float>>       
    > net;

    net.set_weights(
        [](auto& conv1) {
            float weights[4][3] = {
                {-0.45244262f, -0.5210826f,  0.5109306f},
                { 0.17680602f,  0.649183f,   0.18596411f},
                { 0.5866194f,   0.25848153f, 0.44037485f},
                { 0.49810886f,  0.02313359f, 0.46854797f}
            };
            float biases[4] = {
                0.18397215f, 0.12307078f, -0.09220833f, 0.09349092f
            };
        
            conv1.set_weights(weights, biases);
        },

        [](auto& fc1) {
            float weights[8][40] = {
                { 0.20245865f, 0.10547815f, 0.10766964f, 0.12741850f, 0.09874161f, 0.00059602f, 0.00864469f, -0.08771531f, 0.01389605f, -0.17760544f,
                    -0.10606140f, -0.15319343f, 0.08392841f, 0.05412036f, 0.12161240f, -0.05186660f, 0.09437001f, 0.28379040f, 0.10057300f, 0.06362173f,
                    -0.14929767f, -0.06171473f, -0.11291744f, -0.13639784f, 0.13186070f, 0.16991125f, 0.17464268f, 0.11935387f, 0.13332770f, 0.14692405f,
                    -0.01235744f, -0.13508270f, 0.05365538f, -0.05469668f, -0.11281284f, 0.15306602f, 0.01711918f, 0.13933472f, 0.30893770f, 0.23351923f },
               
                   { 0.25191262f, 0.22205740f, -0.02091384f, 0.12694997f, 0.12421150f, 0.14244068f, 0.05301991f, -0.02032513f, 0.06462236f, -0.03555357f,
                    -0.03353942f, -0.15420884f, -0.07425053f, 0.09501871f, 0.23105392f, 0.13616350f, 0.19012578f, 0.01441552f, 0.26758050f, 0.12994640f,
                    -0.20767224f, -0.24678874f, -0.12965101f, 0.01426215f, -0.07388969f, 0.10557856f, 0.02288806f, 0.15451102f, 0.19594008f, 0.03775171f,
                    -0.21019806f, 0.00999570f, -0.13808134f, 0.09234450f, 0.02004885f, 0.18929847f, 0.17631650f, -0.00172809f, 0.23367305f, 0.20581070f },
               
                   { -0.00167150f, -0.03508189f, 0.06995160f, 0.10312331f, 0.16176146f, -0.02605063f, -0.07387532f, 0.09578988f, 0.06963124f, -0.00100717f,
                    -0.24810260f, -0.09735152f, -0.11470944f, 0.03869717f, -0.17501444f, -0.08678187f, -0.00698360f, -0.25780368f, 0.03354322f, 0.22477399f,
                    -0.10853184f, 0.03701900f, 0.01247749f, -0.03456766f, -0.01642903f, -0.18364786f, -0.18732135f, -0.19339782f, -0.10162451f, 0.13509935f,
                    0.01182794f, 0.01996846f, -0.14293498f, 0.03985703f, -0.08830837f, -0.24749187f, -0.02508496f, 0.03290632f, -0.13852710f, 0.10735197f },
               
                   { 0.11720441f, -0.03910781f, -0.10970993f, -0.01778996f, -0.06632023f, -0.04794353f, 0.13426714f, -0.09056858f, 0.12693243f, -0.09774475f,
                    -0.06633944f, -0.13173537f, -0.05764339f, -0.03573337f, 0.15790870f, -0.13893673f, 0.15770940f, 0.02245548f, -0.06543263f, -0.04623829f,
                    -0.08087495f, -0.11003499f, -0.13427565f, 0.15337445f, -0.03835414f, -0.14862265f, 0.04436249f, -0.03585106f, -0.06367519f, 0.13851134f,
                    -0.01257363f, -0.14869954f, 0.10720374f, 0.14331199f, 0.08394563f, -0.05692151f, 0.02849433f, -0.00491317f, -0.09211945f, -0.09307870f },
               
                   { -0.28403217f, -0.11327346f, -0.17170677f, 0.01627072f, -0.23556723f, -0.16857785f, 0.00762606f, 0.03996293f, 0.05758360f, 0.08385561f,
                    0.08483154f, 0.28936020f, 0.05629462f, 0.12235589f, 0.25345162f, 0.22352895f, 0.04154108f, -0.07826106f, -0.02784313f, -0.04043027f,
                    0.19520643f, 0.20153914f, 0.12091997f, 0.13718781f, 0.01086516f, 0.10925857f, -0.09710331f, -0.06368981f, -0.20963444f, -0.14287628f,
                    0.29597172f, 0.12149411f, 0.15681010f, 0.17722030f, 0.14795950f, 0.15223163f, 0.01983022f, -0.16573577f, -0.03954560f, -0.07206639f },
               
                   { -0.19024117f, 0.12663122f, -0.03627932f, -0.11103934f, 0.00963469f, 0.12920327f, 0.13187744f, 0.15534799f, -0.09215152f, -0.08665908f,
                    -0.03758083f, -0.05432159f, 0.07782125f, -0.06304404f, 0.07926343f, -0.09663924f, -0.10284867f, -0.03359179f, 0.06669708f, -0.21731721f,
                    0.03409250f, -0.06538389f, -0.14352824f, -0.04847441f, -0.18227956f, -0.16661492f, 0.00357771f, -0.15023121f, -0.14908262f, -0.14879106f,
                    0.06988985f, 0.02570874f, -0.08303041f, -0.13836166f, 0.02410395f, -0.02795653f, -0.20170245f, -0.08990283f, -0.01122931f, -0.11780960f },
               
                   { -0.08425233f, -0.16438909f, 0.02465638f, -0.05218621f, -0.13821074f, -0.09172043f, -0.20830163f, 0.07304236f, 0.02311372f, 0.02438439f,
                    0.23651181f, 0.13917309f, 0.16883907f, 0.15780650f, 0.13260480f, -0.06946263f, 0.02224668f, -0.10861502f, -0.14482634f, 0.00039958f,
                    0.09914971f, 0.24334522f, 0.17027703f, 0.19373085f, -0.04796289f, 0.12841590f, 0.02248504f, 0.05123487f, -0.19429202f, -0.18067330f,
                    0.26362273f, 0.19952512f, 0.17464693f, 0.04243012f, 0.02076776f, 0.12594093f, -0.06417734f, -0.16935031f, -0.12588921f, 0.05403950f },
               
                   { 0.15068613f, 0.16248012f, 0.27688270f, 0.22739466f, 0.24752861f, 0.01977862f, 0.04009721f, 0.16293398f, -0.18566287f, 0.02840742f,
                    -0.04794976f, -0.08606187f, -0.00125597f, -0.17649095f, -0.12168501f, 0.03581757f, -0.03228141f, 0.27097425f, 0.14901517f, 0.32468930f,
                    -0.13680044f, -0.08256283f, -0.17998537f, 0.00794359f, 0.01583702f, -0.00915928f, 0.15051869f, 0.13108721f, 0.31908762f, 0.23285884f,
                    -0.11643643f, -0.01631123f, -0.00297505f, 0.05181584f, -0.04229511f, 0.07523074f, 0.21936944f, 0.26037723f, 0.03712421f, 0.08555010f }
               };
            float biases[8] = {
                0.01978131f, 0.16008815f, 0.05447051f, -0.05527651f,
                0.24419583f, -0.08980612f, -0.02690837f, 0.08514778f
            };
            fc1.set_weights(weights, biases);
        },

        [](auto& fc2) {
            float weights[1][8] = {
                { 0.26498532f, 0.36902657f, 0.22166009f, 0.1967831f,
                 -0.48356554f, 0.11999892f, -0.34265748f, 0.30296227f }
            };
            float bias[1] = { 0.03137076f };

            fc2.set_weights(weights, bias);
        }



    );

    // 1 - [1,3,4,3.5, 6,7,9]
    // 0 - [9, 7 ,6,4,5,1]

    Tensor<float, 1> input(10);
    // for (int i = 9; i >= 0; i--)
    //     input[9-i] = static_cast<float>(i); 

    for (int i = 0; i < 10; i++)
        input[i] = static_cast<float>(i);

    // auto start = std::chrono::high_resolution_clock::now();
    // auto output = net.forward(input);
    // auto end = std::chrono::high_resolution_clock::now();

    std::chrono::duration<double, std::micro> duration = end - start;
    std::cout << "Forward pass took " << duration.count() << " microseconds\n";

    std::cout << "Output:\n";
    for (std::size_t i = 0; i < output.size(); ++i)
        std::cout << output[i] << "\n";

    return 0;
}